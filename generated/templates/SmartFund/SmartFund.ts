// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BuyPool extends ethereum.Event {
  get params(): BuyPool__Params {
    return new BuyPool__Params(this);
  }
}

export class BuyPool__Params {
  _event: BuyPool;

  constructor(event: BuyPool) {
    this._event = event;
  }

  get poolAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get poolAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get connectorsAddress(): Array<Address> {
    return this._event.parameters[2].value.toAddressArray();
  }

  get connectorsAmount(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }
}

export class DefiCall extends ethereum.Event {
  get params(): DefiCall__Params {
    return new DefiCall__Params(this);
  }
}

export class DefiCall__Params {
  _event: DefiCall;

  constructor(event: DefiCall) {
    this._event = event;
  }

  get eventType(): string {
    return this._event.parameters[0].value.toString();
  }

  get tokensToSend(): Array<Address> {
    return this._event.parameters[1].value.toAddressArray();
  }

  get amountsToSend(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }

  get tokensToReceive(): Array<Address> {
    return this._event.parameters[3].value.toAddressArray();
  }

  get amountsToReceive(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get sharesReceived(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get totalShares(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SellPool extends ethereum.Event {
  get params(): SellPool__Params {
    return new SellPool__Params(this);
  }
}

export class SellPool__Params {
  _event: SellPool;

  constructor(event: SellPool) {
    this._event = event;
  }

  get poolAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get poolAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get connectorsAddress(): Array<Address> {
    return this._event.parameters[2].value.toAddressArray();
  }

  get connectorsAmount(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }
}

export class SmartFundCreated extends ethereum.Event {
  get params(): SmartFundCreated__Params {
    return new SmartFundCreated__Params(this);
  }
}

export class SmartFundCreated__Params {
  _event: SmartFundCreated;

  constructor(event: SmartFundCreated) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Trade extends ethereum.Event {
  get params(): Trade__Params {
    return new Trade__Params(this);
  }
}

export class Trade__Params {
  _event: Trade;

  constructor(event: Trade) {
    this._event = event;
  }

  get src(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get srcAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get dest(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get destReceived(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sharesRemoved(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get totalShares(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SmartFund__calculateFundManagerCutResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class SmartFund extends ethereum.SmartContract {
  static bind(address: Address): SmartFund {
    return new SmartFund("SmartFund", address);
  }

  MAX_TOKENS(): BigInt {
    let result = super.call("MAX_TOKENS", "MAX_TOKENS():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MAX_TOKENS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MAX_TOKENS", "MAX_TOKENS():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  TOTAL_PERCENTAGE(): BigInt {
    let result = super.call(
      "TOTAL_PERCENTAGE",
      "TOTAL_PERCENTAGE():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_TOTAL_PERCENTAGE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "TOTAL_PERCENTAGE",
      "TOTAL_PERCENTAGE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  addressToShares(param0: Address): BigInt {
    let result = super.call(
      "addressToShares",
      "addressToShares(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_addressToShares(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "addressToShares",
      "addressToShares(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  addressesNetDeposit(param0: Address): BigInt {
    let result = super.call(
      "addressesNetDeposit",
      "addressesNetDeposit(address):(int256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_addressesNetDeposit(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "addressesNetDeposit",
      "addressesNetDeposit(address):(int256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowance(_owner: Address, _spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(_owner), ethereum.Value.fromAddress(_spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(
    _owner: Address,
    _spender: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(_owner), ethereum.Value.fromAddress(_spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(_spender: Address, _value: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_spender),
      ethereum.Value.fromUnsignedBigInt(_value)
    ]);

    return result[0].toBoolean();
  }

  try_approve(_spender: Address, _value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_spender),
      ethereum.Value.fromUnsignedBigInt(_value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(_who: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(_who)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(_who: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(_who)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateAddressProfit(_address: Address): BigInt {
    let result = super.call(
      "calculateAddressProfit",
      "calculateAddressProfit(address):(int256)",
      [ethereum.Value.fromAddress(_address)]
    );

    return result[0].toBigInt();
  }

  try_calculateAddressProfit(_address: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateAddressProfit",
      "calculateAddressProfit(address):(int256)",
      [ethereum.Value.fromAddress(_address)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateAddressValue(_address: Address): BigInt {
    let result = super.call(
      "calculateAddressValue",
      "calculateAddressValue(address):(uint256)",
      [ethereum.Value.fromAddress(_address)]
    );

    return result[0].toBigInt();
  }

  try_calculateAddressValue(_address: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateAddressValue",
      "calculateAddressValue(address):(uint256)",
      [ethereum.Value.fromAddress(_address)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateDepositToShares(_amount: BigInt): BigInt {
    let result = super.call(
      "calculateDepositToShares",
      "calculateDepositToShares(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_amount)]
    );

    return result[0].toBigInt();
  }

  try_calculateDepositToShares(_amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateDepositToShares",
      "calculateDepositToShares(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_amount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateFundManagerCut(): SmartFund__calculateFundManagerCutResult {
    let result = super.call(
      "calculateFundManagerCut",
      "calculateFundManagerCut():(uint256,uint256,uint256)",
      []
    );

    return new SmartFund__calculateFundManagerCutResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_calculateFundManagerCut(): ethereum.CallResult<
    SmartFund__calculateFundManagerCutResult
  > {
    let result = super.tryCall(
      "calculateFundManagerCut",
      "calculateFundManagerCut():(uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SmartFund__calculateFundManagerCutResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  calculateFundProfit(): BigInt {
    let result = super.call(
      "calculateFundProfit",
      "calculateFundProfit():(int256)",
      []
    );

    return result[0].toBigInt();
  }

  try_calculateFundProfit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateFundProfit",
      "calculateFundProfit():(int256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateFundValue(): BigInt {
    let result = super.call(
      "calculateFundValue",
      "calculateFundValue():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_calculateFundValue(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateFundValue",
      "calculateFundValue():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  coreFundAsset(): Address {
    let result = super.call("coreFundAsset", "coreFundAsset():(address)", []);

    return result[0].toAddress();
  }

  try_coreFundAsset(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "coreFundAsset",
      "coreFundAsset():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  defiPortal(): Address {
    let result = super.call("defiPortal", "defiPortal():(address)", []);

    return result[0].toAddress();
  }

  try_defiPortal(): ethereum.CallResult<Address> {
    let result = super.tryCall("defiPortal", "defiPortal():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deposit(depositAmount: BigInt): BigInt {
    let result = super.call("deposit", "deposit(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(depositAmount)
    ]);

    return result[0].toBigInt();
  }

  try_deposit(depositAmount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("deposit", "deposit(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(depositAmount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  exchangePortal(): Address {
    let result = super.call("exchangePortal", "exchangePortal():(address)", []);

    return result[0].toAddress();
  }

  try_exchangePortal(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "exchangePortal",
      "exchangePortal():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  fundManagerCashedOut(): BigInt {
    let result = super.call(
      "fundManagerCashedOut",
      "fundManagerCashedOut():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_fundManagerCashedOut(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "fundManagerCashedOut",
      "fundManagerCashedOut():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAllTokenAddresses(): Array<Address> {
    let result = super.call(
      "getAllTokenAddresses",
      "getAllTokenAddresses():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getAllTokenAddresses(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getAllTokenAddresses",
      "getAllTokenAddresses():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getFundTokenHolding(_token: Address): BigInt {
    let result = super.call(
      "getFundTokenHolding",
      "getFundTokenHolding(address):(uint256)",
      [ethereum.Value.fromAddress(_token)]
    );

    return result[0].toBigInt();
  }

  try_getFundTokenHolding(_token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getFundTokenHolding",
      "getFundTokenHolding(address):(uint256)",
      [ethereum.Value.fromAddress(_token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTokenValue(_token: Address): BigInt {
    let result = super.call(
      "getTokenValue",
      "getTokenValue(address):(uint256)",
      [ethereum.Value.fromAddress(_token)]
    );

    return result[0].toBigInt();
  }

  try_getTokenValue(_token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTokenValue",
      "getTokenValue(address):(uint256)",
      [ethereum.Value.fromAddress(_token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isLightFund(): boolean {
    let result = super.call("isLightFund", "isLightFund():(bool)", []);

    return result[0].toBoolean();
  }

  try_isLightFund(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isLightFund", "isLightFund():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isRequireTradeVerification(): boolean {
    let result = super.call(
      "isRequireTradeVerification",
      "isRequireTradeVerification():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_isRequireTradeVerification(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isRequireTradeVerification",
      "isRequireTradeVerification():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isStableCoinBasedFund(): boolean {
    let result = super.call(
      "isStableCoinBasedFund",
      "isStableCoinBasedFund():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_isStableCoinBasedFund(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isStableCoinBasedFund",
      "isStableCoinBasedFund():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  onlyWhitelist(): boolean {
    let result = super.call("onlyWhitelist", "onlyWhitelist():(bool)", []);

    return result[0].toBoolean();
  }

  try_onlyWhitelist(): ethereum.CallResult<boolean> {
    let result = super.tryCall("onlyWhitelist", "onlyWhitelist():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  permittedAddresses(): Address {
    let result = super.call(
      "permittedAddresses",
      "permittedAddresses():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_permittedAddresses(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "permittedAddresses",
      "permittedAddresses():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  platformAddress(): Address {
    let result = super.call(
      "platformAddress",
      "platformAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_platformAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "platformAddress",
      "platformAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  platformFee(): BigInt {
    let result = super.call("platformFee", "platformFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_platformFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("platformFee", "platformFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  poolPortal(): Address {
    let result = super.call("poolPortal", "poolPortal():(address)", []);

    return result[0].toAddress();
  }

  try_poolPortal(): ethereum.CallResult<Address> {
    let result = super.tryCall("poolPortal", "poolPortal():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  successFee(): BigInt {
    let result = super.call("successFee", "successFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_successFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("successFee", "successFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenAddresses(param0: BigInt): Address {
    let result = super.call(
      "tokenAddresses",
      "tokenAddresses(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_tokenAddresses(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "tokenAddresses",
      "tokenAddresses(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokensTraded(param0: Address): boolean {
    let result = super.call("tokensTraded", "tokensTraded(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_tokensTraded(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("tokensTraded", "tokensTraded(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  totalShares(): BigInt {
    let result = super.call("totalShares", "totalShares():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalShares(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalShares", "totalShares():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalWeiDeposited(): BigInt {
    let result = super.call(
      "totalWeiDeposited",
      "totalWeiDeposited():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalWeiDeposited(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalWeiDeposited",
      "totalWeiDeposited():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalWeiWithdrawn(): BigInt {
    let result = super.call(
      "totalWeiWithdrawn",
      "totalWeiWithdrawn():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalWeiWithdrawn(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalWeiWithdrawn",
      "totalWeiWithdrawn():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(_to: Address, _value: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_to),
      ethereum.Value.fromUnsignedBigInt(_value)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(_to: Address, _value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_to),
      ethereum.Value.fromUnsignedBigInt(_value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(_from: Address, _to: Address, _value: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_value)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    _from: Address,
    _to: Address,
    _value: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_value)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  version(): BigInt {
    let result = super.call("version", "version():(uint256)", []);

    return result[0].toBigInt();
  }

  try_version(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("version", "version():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  whitelist(param0: Address): boolean {
    let result = super.call("whitelist", "whitelist(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_whitelist(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("whitelist", "whitelist(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _successFee(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _platformAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _exchangePortalAddress(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _poolPortalAddress(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _defiPortal(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get _permittedAddresses(): Address {
    return this._call.inputValues[7].value.toAddress();
  }

  get _coinAddress(): Address {
    return this._call.inputValues[8].value.toAddress();
  }

  get _isRequireTradeVerification(): boolean {
    return this._call.inputValues[9].value.toBoolean();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get _spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BuyPoolCall extends ethereum.Call {
  get inputs(): BuyPoolCall__Inputs {
    return new BuyPoolCall__Inputs(this);
  }

  get outputs(): BuyPoolCall__Outputs {
    return new BuyPoolCall__Outputs(this);
  }
}

export class BuyPoolCall__Inputs {
  _call: BuyPoolCall;

  constructor(call: BuyPoolCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _type(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _poolToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _connectorsAddress(): Array<Address> {
    return this._call.inputValues[3].value.toAddressArray();
  }

  get _connectorsAmount(): Array<BigInt> {
    return this._call.inputValues[4].value.toBigIntArray();
  }

  get _additionalArgs(): Array<Bytes> {
    return this._call.inputValues[5].value.toBytesArray();
  }

  get _additionData(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class BuyPoolCall__Outputs {
  _call: BuyPoolCall;

  constructor(call: BuyPoolCall) {
    this._call = call;
  }
}

export class CallDefiPortalCall extends ethereum.Call {
  get inputs(): CallDefiPortalCall__Inputs {
    return new CallDefiPortalCall__Inputs(this);
  }

  get outputs(): CallDefiPortalCall__Outputs {
    return new CallDefiPortalCall__Outputs(this);
  }
}

export class CallDefiPortalCall__Inputs {
  _call: CallDefiPortalCall;

  constructor(call: CallDefiPortalCall) {
    this._call = call;
  }

  get tokensToSend(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get amountsToSend(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get _additionalArgs(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }

  get _additionalData(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class CallDefiPortalCall__Outputs {
  _call: CallDefiPortalCall;

  constructor(call: CallDefiPortalCall) {
    this._call = call;
  }
}

export class ChangeStableCoinAddressCall extends ethereum.Call {
  get inputs(): ChangeStableCoinAddressCall__Inputs {
    return new ChangeStableCoinAddressCall__Inputs(this);
  }

  get outputs(): ChangeStableCoinAddressCall__Outputs {
    return new ChangeStableCoinAddressCall__Outputs(this);
  }
}

export class ChangeStableCoinAddressCall__Inputs {
  _call: ChangeStableCoinAddressCall;

  constructor(call: ChangeStableCoinAddressCall) {
    this._call = call;
  }

  get _coinAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeStableCoinAddressCall__Outputs {
  _call: ChangeStableCoinAddressCall;

  constructor(call: ChangeStableCoinAddressCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get depositAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class EmergencyWithdrawCall extends ethereum.Call {
  get inputs(): EmergencyWithdrawCall__Inputs {
    return new EmergencyWithdrawCall__Inputs(this);
  }

  get outputs(): EmergencyWithdrawCall__Outputs {
    return new EmergencyWithdrawCall__Outputs(this);
  }
}

export class EmergencyWithdrawCall__Inputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class EmergencyWithdrawCall__Outputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }
}

export class FundManagerWithdrawCall extends ethereum.Call {
  get inputs(): FundManagerWithdrawCall__Inputs {
    return new FundManagerWithdrawCall__Inputs(this);
  }

  get outputs(): FundManagerWithdrawCall__Outputs {
    return new FundManagerWithdrawCall__Outputs(this);
  }
}

export class FundManagerWithdrawCall__Inputs {
  _call: FundManagerWithdrawCall;

  constructor(call: FundManagerWithdrawCall) {
    this._call = call;
  }
}

export class FundManagerWithdrawCall__Outputs {
  _call: FundManagerWithdrawCall;

  constructor(call: FundManagerWithdrawCall) {
    this._call = call;
  }
}

export class RemoveTokenCall extends ethereum.Call {
  get inputs(): RemoveTokenCall__Inputs {
    return new RemoveTokenCall__Inputs(this);
  }

  get outputs(): RemoveTokenCall__Outputs {
    return new RemoveTokenCall__Outputs(this);
  }
}

export class RemoveTokenCall__Inputs {
  _call: RemoveTokenCall;

  constructor(call: RemoveTokenCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenIndex(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RemoveTokenCall__Outputs {
  _call: RemoveTokenCall;

  constructor(call: RemoveTokenCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class ResetApproveCall extends ethereum.Call {
  get inputs(): ResetApproveCall__Inputs {
    return new ResetApproveCall__Inputs(this);
  }

  get outputs(): ResetApproveCall__Outputs {
    return new ResetApproveCall__Outputs(this);
  }
}

export class ResetApproveCall__Inputs {
  _call: ResetApproveCall;

  constructor(call: ResetApproveCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ResetApproveCall__Outputs {
  _call: ResetApproveCall;

  constructor(call: ResetApproveCall) {
    this._call = call;
  }
}

export class SellPoolCall extends ethereum.Call {
  get inputs(): SellPoolCall__Inputs {
    return new SellPoolCall__Inputs(this);
  }

  get outputs(): SellPoolCall__Outputs {
    return new SellPoolCall__Outputs(this);
  }
}

export class SellPoolCall__Inputs {
  _call: SellPoolCall;

  constructor(call: SellPoolCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _type(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _poolToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _additionalArgs(): Array<Bytes> {
    return this._call.inputValues[3].value.toBytesArray();
  }

  get _additionData(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SellPoolCall__Outputs {
  _call: SellPoolCall;

  constructor(call: SellPoolCall) {
    this._call = call;
  }
}

export class SetNewDefiPortalCall extends ethereum.Call {
  get inputs(): SetNewDefiPortalCall__Inputs {
    return new SetNewDefiPortalCall__Inputs(this);
  }

  get outputs(): SetNewDefiPortalCall__Outputs {
    return new SetNewDefiPortalCall__Outputs(this);
  }
}

export class SetNewDefiPortalCall__Inputs {
  _call: SetNewDefiPortalCall;

  constructor(call: SetNewDefiPortalCall) {
    this._call = call;
  }

  get _newDefiPortalAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetNewDefiPortalCall__Outputs {
  _call: SetNewDefiPortalCall;

  constructor(call: SetNewDefiPortalCall) {
    this._call = call;
  }
}

export class SetNewExchangePortalCall extends ethereum.Call {
  get inputs(): SetNewExchangePortalCall__Inputs {
    return new SetNewExchangePortalCall__Inputs(this);
  }

  get outputs(): SetNewExchangePortalCall__Outputs {
    return new SetNewExchangePortalCall__Outputs(this);
  }
}

export class SetNewExchangePortalCall__Inputs {
  _call: SetNewExchangePortalCall;

  constructor(call: SetNewExchangePortalCall) {
    this._call = call;
  }

  get _newExchangePortalAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetNewExchangePortalCall__Outputs {
  _call: SetNewExchangePortalCall;

  constructor(call: SetNewExchangePortalCall) {
    this._call = call;
  }
}

export class SetNewPoolPortalCall extends ethereum.Call {
  get inputs(): SetNewPoolPortalCall__Inputs {
    return new SetNewPoolPortalCall__Inputs(this);
  }

  get outputs(): SetNewPoolPortalCall__Outputs {
    return new SetNewPoolPortalCall__Outputs(this);
  }
}

export class SetNewPoolPortalCall__Inputs {
  _call: SetNewPoolPortalCall;

  constructor(call: SetNewPoolPortalCall) {
    this._call = call;
  }

  get _newPoolPortal(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetNewPoolPortalCall__Outputs {
  _call: SetNewPoolPortalCall;

  constructor(call: SetNewPoolPortalCall) {
    this._call = call;
  }
}

export class SetWhitelistAddressCall extends ethereum.Call {
  get inputs(): SetWhitelistAddressCall__Inputs {
    return new SetWhitelistAddressCall__Inputs(this);
  }

  get outputs(): SetWhitelistAddressCall__Outputs {
    return new SetWhitelistAddressCall__Outputs(this);
  }
}

export class SetWhitelistAddressCall__Inputs {
  _call: SetWhitelistAddressCall;

  constructor(call: SetWhitelistAddressCall) {
    this._call = call;
  }

  get _user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _allowed(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetWhitelistAddressCall__Outputs {
  _call: SetWhitelistAddressCall;

  constructor(call: SetWhitelistAddressCall) {
    this._call = call;
  }
}

export class SetWhitelistOnlyCall extends ethereum.Call {
  get inputs(): SetWhitelistOnlyCall__Inputs {
    return new SetWhitelistOnlyCall__Inputs(this);
  }

  get outputs(): SetWhitelistOnlyCall__Outputs {
    return new SetWhitelistOnlyCall__Outputs(this);
  }
}

export class SetWhitelistOnlyCall__Inputs {
  _call: SetWhitelistOnlyCall;

  constructor(call: SetWhitelistOnlyCall) {
    this._call = call;
  }

  get _onlyWhitelist(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetWhitelistOnlyCall__Outputs {
  _call: SetWhitelistOnlyCall;

  constructor(call: SetWhitelistOnlyCall) {
    this._call = call;
  }
}

export class TradeCall extends ethereum.Call {
  get inputs(): TradeCall__Inputs {
    return new TradeCall__Inputs(this);
  }

  get outputs(): TradeCall__Outputs {
    return new TradeCall__Outputs(this);
  }
}

export class TradeCall__Inputs {
  _call: TradeCall;

  constructor(call: TradeCall) {
    this._call = call;
  }

  get _source(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _sourceAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _destination(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _type(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _proof(): Array<Bytes> {
    return this._call.inputValues[4].value.toBytesArray();
  }

  get _positions(): Array<BigInt> {
    return this._call.inputValues[5].value.toBigIntArray();
  }

  get _additionalData(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }

  get _minReturn(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }
}

export class TradeCall__Outputs {
  _call: TradeCall;

  constructor(call: TradeCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _percentageWithdraw(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
