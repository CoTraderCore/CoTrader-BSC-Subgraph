// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class SmartFund extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save SmartFund entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SmartFund entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SmartFund", id.toString(), this);
  }

  static load(id: string): SmartFund | null {
    return store.get("SmartFund", id) as SmartFund | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }
}

export class SmartFundDeposit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save SmartFundDeposit entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SmartFundDeposit entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SmartFundDeposit", id.toString(), this);
  }

  static load(id: string): SmartFundDeposit | null {
    return store.get("SmartFundDeposit", id) as SmartFundDeposit | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get smartFundAddress(): string {
    let value = this.get("smartFundAddress");
    return value.toString();
  }

  set smartFundAddress(value: string) {
    this.set("smartFundAddress", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get sharesReceived(): BigInt {
    let value = this.get("sharesReceived");
    return value.toBigInt();
  }

  set sharesReceived(value: BigInt) {
    this.set("sharesReceived", Value.fromBigInt(value));
  }

  get totalShares(): BigInt {
    let value = this.get("totalShares");
    return value.toBigInt();
  }

  set totalShares(value: BigInt) {
    this.set("totalShares", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class SmartFundTrade extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save SmartFundTrade entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SmartFundTrade entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SmartFundTrade", id.toString(), this);
  }

  static load(id: string): SmartFundTrade | null {
    return store.get("SmartFundTrade", id) as SmartFundTrade | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get smartFundAddress(): string {
    let value = this.get("smartFundAddress");
    return value.toString();
  }

  set smartFundAddress(value: string) {
    this.set("smartFundAddress", Value.fromString(value));
  }

  get source(): Bytes {
    let value = this.get("source");
    return value.toBytes();
  }

  set source(value: Bytes) {
    this.set("source", Value.fromBytes(value));
  }

  get sourceAmount(): BigInt {
    let value = this.get("sourceAmount");
    return value.toBigInt();
  }

  set sourceAmount(value: BigInt) {
    this.set("sourceAmount", Value.fromBigInt(value));
  }

  get destination(): Bytes {
    let value = this.get("destination");
    return value.toBytes();
  }

  set destination(value: Bytes) {
    this.set("destination", Value.fromBytes(value));
  }

  get destinationAmount(): BigInt {
    let value = this.get("destinationAmount");
    return value.toBigInt();
  }

  set destinationAmount(value: BigInt) {
    this.set("destinationAmount", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class SmartFundWithdraw extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save SmartFundWithdraw entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SmartFundWithdraw entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SmartFundWithdraw", id.toString(), this);
  }

  static load(id: string): SmartFundWithdraw | null {
    return store.get("SmartFundWithdraw", id) as SmartFundWithdraw | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get smartFundAddress(): string {
    let value = this.get("smartFundAddress");
    return value.toString();
  }

  set smartFundAddress(value: string) {
    this.set("smartFundAddress", Value.fromString(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get sharesRemoved(): BigInt {
    let value = this.get("sharesRemoved");
    return value.toBigInt();
  }

  set sharesRemoved(value: BigInt) {
    this.set("sharesRemoved", Value.fromBigInt(value));
  }

  get totalShares(): BigInt {
    let value = this.get("totalShares");
    return value.toBigInt();
  }

  set totalShares(value: BigInt) {
    this.set("totalShares", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}
