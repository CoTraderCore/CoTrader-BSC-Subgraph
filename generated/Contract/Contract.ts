// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SmartFundAdded extends ethereum.Event {
  get params(): SmartFundAdded__Params {
    return new SmartFundAdded__Params(this);
  }
}

export class SmartFundAdded__Params {
  _event: SmartFundAdded;

  constructor(event: SmartFundAdded) {
    this._event = event;
  }

  get smartFundAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  defiPortalAddress(): Address {
    let result = super.call(
      "defiPortalAddress",
      "defiPortalAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_defiPortalAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "defiPortalAddress",
      "defiPortalAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  exchangePortalAddress(): Address {
    let result = super.call(
      "exchangePortalAddress",
      "exchangePortalAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_exchangePortalAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "exchangePortalAddress",
      "exchangePortalAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAllSmartFundAddresses(): Array<Address> {
    let result = super.call(
      "getAllSmartFundAddresses",
      "getAllSmartFundAddresses():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getAllSmartFundAddresses(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getAllSmartFundAddresses",
      "getAllSmartFundAddresses():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  maximumSuccessFee(): BigInt {
    let result = super.call(
      "maximumSuccessFee",
      "maximumSuccessFee():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maximumSuccessFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maximumSuccessFee",
      "maximumSuccessFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  permittedAddresses(): Address {
    let result = super.call(
      "permittedAddresses",
      "permittedAddresses():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_permittedAddresses(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "permittedAddresses",
      "permittedAddresses():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  platformFeeAddress(): Address {
    let result = super.call(
      "platformFeeAddress",
      "platformFeeAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_platformFeeAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "platformFeeAddress",
      "platformFeeAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  poolPortalAddress(): Address {
    let result = super.call(
      "poolPortalAddress",
      "poolPortalAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_poolPortalAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "poolPortalAddress",
      "poolPortalAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  smartFundERC20Factory(): Address {
    let result = super.call(
      "smartFundERC20Factory",
      "smartFundERC20Factory():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_smartFundERC20Factory(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "smartFundERC20Factory",
      "smartFundERC20Factory():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  smartFundETHFactory(): Address {
    let result = super.call(
      "smartFundETHFactory",
      "smartFundETHFactory():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_smartFundETHFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "smartFundETHFactory",
      "smartFundETHFactory():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  smartFunds(param0: BigInt): Address {
    let result = super.call("smartFunds", "smartFunds(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_smartFunds(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("smartFunds", "smartFunds(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalSmartFunds(): BigInt {
    let result = super.call(
      "totalSmartFunds",
      "totalSmartFunds():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalSmartFunds(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalSmartFunds",
      "totalSmartFunds():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _exchangePortalAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _poolPortalAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _smartFundETHFactory(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _smartFundERC20Factory(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _defiPortalAddress(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _permittedAddresses(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class CreateSmartFundCall extends ethereum.Call {
  get inputs(): CreateSmartFundCall__Inputs {
    return new CreateSmartFundCall__Inputs(this);
  }

  get outputs(): CreateSmartFundCall__Outputs {
    return new CreateSmartFundCall__Outputs(this);
  }
}

export class CreateSmartFundCall__Inputs {
  _call: CreateSmartFundCall;

  constructor(call: CreateSmartFundCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _successFee(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _coreAsset(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _isRequireTradeVerification(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class CreateSmartFundCall__Outputs {
  _call: CreateSmartFundCall;

  constructor(call: CreateSmartFundCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetDefiPortalCall extends ethereum.Call {
  get inputs(): SetDefiPortalCall__Inputs {
    return new SetDefiPortalCall__Inputs(this);
  }

  get outputs(): SetDefiPortalCall__Outputs {
    return new SetDefiPortalCall__Outputs(this);
  }
}

export class SetDefiPortalCall__Inputs {
  _call: SetDefiPortalCall;

  constructor(call: SetDefiPortalCall) {
    this._call = call;
  }

  get _newDefiPortalAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetDefiPortalCall__Outputs {
  _call: SetDefiPortalCall;

  constructor(call: SetDefiPortalCall) {
    this._call = call;
  }
}

export class SetExchangePortalAddressCall extends ethereum.Call {
  get inputs(): SetExchangePortalAddressCall__Inputs {
    return new SetExchangePortalAddressCall__Inputs(this);
  }

  get outputs(): SetExchangePortalAddressCall__Outputs {
    return new SetExchangePortalAddressCall__Outputs(this);
  }
}

export class SetExchangePortalAddressCall__Inputs {
  _call: SetExchangePortalAddressCall;

  constructor(call: SetExchangePortalAddressCall) {
    this._call = call;
  }

  get _newExchangePortalAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetExchangePortalAddressCall__Outputs {
  _call: SetExchangePortalAddressCall;

  constructor(call: SetExchangePortalAddressCall) {
    this._call = call;
  }
}

export class SetMaximumSuccessFeeCall extends ethereum.Call {
  get inputs(): SetMaximumSuccessFeeCall__Inputs {
    return new SetMaximumSuccessFeeCall__Inputs(this);
  }

  get outputs(): SetMaximumSuccessFeeCall__Outputs {
    return new SetMaximumSuccessFeeCall__Outputs(this);
  }
}

export class SetMaximumSuccessFeeCall__Inputs {
  _call: SetMaximumSuccessFeeCall;

  constructor(call: SetMaximumSuccessFeeCall) {
    this._call = call;
  }

  get _maximumSuccessFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaximumSuccessFeeCall__Outputs {
  _call: SetMaximumSuccessFeeCall;

  constructor(call: SetMaximumSuccessFeeCall) {
    this._call = call;
  }
}

export class SetNewPlatformFeeAddressCall extends ethereum.Call {
  get inputs(): SetNewPlatformFeeAddressCall__Inputs {
    return new SetNewPlatformFeeAddressCall__Inputs(this);
  }

  get outputs(): SetNewPlatformFeeAddressCall__Outputs {
    return new SetNewPlatformFeeAddressCall__Outputs(this);
  }
}

export class SetNewPlatformFeeAddressCall__Inputs {
  _call: SetNewPlatformFeeAddressCall;

  constructor(call: SetNewPlatformFeeAddressCall) {
    this._call = call;
  }

  get _newPlatformFeeAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetNewPlatformFeeAddressCall__Outputs {
  _call: SetNewPlatformFeeAddressCall;

  constructor(call: SetNewPlatformFeeAddressCall) {
    this._call = call;
  }
}

export class SetNewSmartFundERC20FactoryCall extends ethereum.Call {
  get inputs(): SetNewSmartFundERC20FactoryCall__Inputs {
    return new SetNewSmartFundERC20FactoryCall__Inputs(this);
  }

  get outputs(): SetNewSmartFundERC20FactoryCall__Outputs {
    return new SetNewSmartFundERC20FactoryCall__Outputs(this);
  }
}

export class SetNewSmartFundERC20FactoryCall__Inputs {
  _call: SetNewSmartFundERC20FactoryCall;

  constructor(call: SetNewSmartFundERC20FactoryCall) {
    this._call = call;
  }

  get _smartFundERC20Factory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetNewSmartFundERC20FactoryCall__Outputs {
  _call: SetNewSmartFundERC20FactoryCall;

  constructor(call: SetNewSmartFundERC20FactoryCall) {
    this._call = call;
  }
}

export class SetNewSmartFundETHFactoryCall extends ethereum.Call {
  get inputs(): SetNewSmartFundETHFactoryCall__Inputs {
    return new SetNewSmartFundETHFactoryCall__Inputs(this);
  }

  get outputs(): SetNewSmartFundETHFactoryCall__Outputs {
    return new SetNewSmartFundETHFactoryCall__Outputs(this);
  }
}

export class SetNewSmartFundETHFactoryCall__Inputs {
  _call: SetNewSmartFundETHFactoryCall;

  constructor(call: SetNewSmartFundETHFactoryCall) {
    this._call = call;
  }

  get _smartFundETHFactory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetNewSmartFundETHFactoryCall__Outputs {
  _call: SetNewSmartFundETHFactoryCall;

  constructor(call: SetNewSmartFundETHFactoryCall) {
    this._call = call;
  }
}

export class SetPoolPortalAddressCall extends ethereum.Call {
  get inputs(): SetPoolPortalAddressCall__Inputs {
    return new SetPoolPortalAddressCall__Inputs(this);
  }

  get outputs(): SetPoolPortalAddressCall__Outputs {
    return new SetPoolPortalAddressCall__Outputs(this);
  }
}

export class SetPoolPortalAddressCall__Inputs {
  _call: SetPoolPortalAddressCall;

  constructor(call: SetPoolPortalAddressCall) {
    this._call = call;
  }

  get _poolPortalAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetPoolPortalAddressCall__Outputs {
  _call: SetPoolPortalAddressCall;

  constructor(call: SetPoolPortalAddressCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawEtherCall extends ethereum.Call {
  get inputs(): WithdrawEtherCall__Inputs {
    return new WithdrawEtherCall__Inputs(this);
  }

  get outputs(): WithdrawEtherCall__Outputs {
    return new WithdrawEtherCall__Outputs(this);
  }
}

export class WithdrawEtherCall__Inputs {
  _call: WithdrawEtherCall;

  constructor(call: WithdrawEtherCall) {
    this._call = call;
  }
}

export class WithdrawEtherCall__Outputs {
  _call: WithdrawEtherCall;

  constructor(call: WithdrawEtherCall) {
    this._call = call;
  }
}

export class WithdrawTokensCall extends ethereum.Call {
  get inputs(): WithdrawTokensCall__Inputs {
    return new WithdrawTokensCall__Inputs(this);
  }

  get outputs(): WithdrawTokensCall__Outputs {
    return new WithdrawTokensCall__Outputs(this);
  }
}

export class WithdrawTokensCall__Inputs {
  _call: WithdrawTokensCall;

  constructor(call: WithdrawTokensCall) {
    this._call = call;
  }

  get _tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawTokensCall__Outputs {
  _call: WithdrawTokensCall;

  constructor(call: WithdrawTokensCall) {
    this._call = call;
  }
}
